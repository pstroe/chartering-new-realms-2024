{"version":3,"file":"lib_core_lib_index_js-_d6580.912361966417894df525.js","mappings":";;;;;;;;;;;;;;;;AAAoD;AACL;AACxC;AACP;AACA,mCAAmC,yDAAW;AAC9C;AACA;AACA,YAAY,8DAAW;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;AC7BgC;AACe;AACxC;AACP;AACA,mCAAmC,yDAAW;AAC9C;AACA,YAAY,iDAAO;AACnB,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACdqC;AACU;AACS;AACjD;AACP;AACA,mCAAmC,yDAAW;AAC9C;AACA,YAAY,oDAAS;AACrB,mCAAmC,qEAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB,IAAI;AACxB;AACA,6BAA6B,UAAU;AACvC;AACA,8BAA8B,iCAAiC;AAC/D;AACA;;;;;;;;;;;;;;;;ACvCkC;AACZ;;;;;;;;;;;;;;;;;;ACDiC;AACZ;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA,mBAAmB,kEAAmB;AACtC;AACA;AACA;AACA;AACA,iBAAiB,qDAAO;AACxB,8DAA8D,IAAI;AAClE,wBAAwB,qDAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/ByD;AACD;AACwB;AACxC;AACuB;AACjB;AAC/B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAO;AAC5B;AACA;AACA;AACA,kCAAkC,yDAAW;AAC7C;AACA,gCAAgC,qEAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qEAAqB;AAC9D,4BAA4B,qEAAsB;AAClD;AACA,wBAAwB,qDAAc;AACtC,gBAAgB,4EAAyB;AACzC,qBAAqB,2DAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@anaconda/core/../../lib/core/lib/datadog.js","webpack://@anaconda/core/../../lib/core/lib/feature_flag.js","webpack://@anaconda/core/../../lib/core/lib/google_analytics.js","webpack://@anaconda/core/../../lib/core/lib/heap.js","webpack://@anaconda/core/../../lib/core/lib/index.js","webpack://@anaconda/core/../../lib/core/lib/launch_darkly.js","webpack://@anaconda/core/../../lib/core/lib/plugin.js"],"sourcesContent":["import { datadogLogs } from \"@datadog/browser-logs\";\nimport { Environment } from \"@anaconda/shared\";\nexport function initializeDatadog(config, monorepoFeatureFlagEnabled) {\n    try {\n        if (config.environment === Environment.production &&\n            monorepoFeatureFlagEnabled) {\n            console.log(\"Initializing Datadog\");\n            datadogLogs.init({\n                clientToken: config.datadog.clientToken,\n                service: config.datadog.service,\n                forwardErrorsToLogs: true,\n                silentMultipleInit: true,\n            });\n            return true;\n        }\n    }\n    catch (e) {\n        console.log(\"failed to initialize datadog\");\n    }\n    return false;\n}\n","export function createCloudFeatureFlag(client, overrides) {\n    return {\n        getBool(name, fallback) {\n            const override = overrides[name];\n            return typeof override === 'boolean'\n                ? override\n                : client.variation(name, fallback);\n        },\n        getString(name, fallback) {\n            const override = overrides[name];\n            return typeof override === 'string'\n                ? override\n                : client.variation(name, fallback);\n        },\n    };\n}\nexport function createLocalFeatureFlag(overrides) {\n    return {\n        getBool(name, fallback) {\n            const override = overrides[name];\n            return typeof override === 'boolean'\n                ? override : fallback;\n        },\n        getString(name, fallback) {\n            const override = overrides[name];\n            return typeof override === 'string'\n                ? override : fallback;\n        },\n    };\n}\n","import ReactGA from 'react-ga4';\nimport { Environment } from '@anaconda/shared';\nexport function initializeGoogleAnalytics(config) {\n    try {\n        if (config.environment !== Environment.local) {\n            console.log('initializing google analytics');\n            ReactGA.initialize(config.ga.clientId);\n            return ReactGA;\n        }\n    }\n    catch (e) {\n        console.log('failed to initialize google analytics');\n    }\n    return null;\n}\n","import ReactHeap from 'reactjs-heap';\nimport { Environment } from '@anaconda/shared';\nimport { getLaunchDarklyClient } from './launch_darkly';\nexport async function initializeHeap(config) {\n    try {\n        if (config.environment !== Environment.local) {\n            console.log('initializing heap');\n            ReactHeap.initialize(config.heap.clientId);\n            const ldClient = await getLaunchDarklyClient(config);\n            addLaunchDarklyToHeap(ldClient);\n            return true;\n        }\n    }\n    catch (e) {\n        console.log('failed to initialize heap');\n    }\n    return false;\n}\nexport function addLaunchDarklyToHeap(client) {\n    // There's no @types for heap's window object unfortunately\n    // Also unfortunately, ReactHeap doesn't return the variable, but instead we have to pull it\n    // off window instead\n    const heap = window.heap;\n    if (!heap)\n        return false;\n    console.log('initializing heap user and event properties');\n    let ffUserID = client.getContext().key;\n    if (ffUserID !== 'user:unknown-user-id') {\n        heap.identify(ffUserID.replace('user:', ''));\n    }\n    // prepend ff- to the name of all the feature flags to make it easier to find in heap\n    const flags = { 'ff-initialized': 'true' };\n    for (const [key, value] of Object.entries(client.allFlags())) {\n        flags[`ff-${key}`] = value;\n    }\n    heap.addUserProperties({ ffUserID });\n    heap.clearEventProperties();\n    heap.addEventProperties({ ldInitialized: 'true', ...flags });\n    return true;\n}\n","import CorePlugin from './plugin';\nexport { CorePlugin };\n","import * as LDCLient from 'launchdarkly-js-client-sdk';\nimport { backend } from '@anaconda/shared';\nexport async function getLaunchDarklyClient(config) {\n    let context;\n    try {\n        context = await getCloudContext();\n    }\n    catch (e) {\n        context = {\n            kind: 'user',\n            key: `user:${getUserId()}`,\n        };\n    }\n    console.log('initializing launch darkly', context);\n    const client = LDCLient.initialize(config.featureFlag.clientId, context);\n    await client.waitUntilReady();\n    return client;\n}\nasync function getCloudContext() {\n    return await backend\n        .backendFetch('aext_core_server/feature_flag/init', {}, {})\n        .then((data) => backend.handleProxyResponse(data));\n}\nfunction getUserId() {\n    let userId = 'unknown-user-id';\n    const urlPathName = window.location.pathname;\n    const regExpMatch = urlPathName.match(/\\/user\\/([^/]*)\\//i);\n    if (regExpMatch && regExpMatch.length > 0) {\n        userId = regExpMatch[1];\n    }\n    return userId;\n}\n","import { backend, Environment, } from \"@anaconda/shared\";\nimport { getLaunchDarklyClient } from \"./launch_darkly\";\nimport { createCloudFeatureFlag, createLocalFeatureFlag } from \"./feature_flag\";\nimport { initializeHeap } from \"./heap\";\nimport { initializeGoogleAnalytics } from \"./google_analytics\";\nimport { initializeDatadog } from \"./datadog\";\nexport default class Plugin {\n    constructor() {\n        this.#ready = this._getReady();\n    }\n    #ready;\n    activate(app, opts) { }\n    ready() {\n        return this.#ready;\n    }\n    async getConfig() {\n        return await backend.backendFetch(\"aext_core_server/config\");\n    }\n    async _getReady() {\n        const config = await this.getConfig();\n        if (config.environment == Environment.local) {\n            console.log(\"[Config] local config\");\n            const featureFlag = createLocalFeatureFlag(config.featureFlag.overrides);\n            const analytics = {\n                heap: false,\n                ga: null,\n                datadog: false,\n            };\n            return {\n                featureFlag,\n                analytics,\n                config,\n            };\n        }\n        ;\n        console.log(\"[Config] cloud config\");\n        const launchDarklyClient = await getLaunchDarklyClient(config);\n        const featureFlag = createCloudFeatureFlag(launchDarklyClient, config.featureFlag.overrides);\n        const analytics = {\n            heap: await initializeHeap(config),\n            ga: initializeGoogleAnalytics(config),\n            datadog: initializeDatadog(config, featureFlag.getBool(\"monorepo-datadog\", false)),\n        };\n        return {\n            featureFlag,\n            analytics,\n            config,\n        };\n    }\n}\n"],"names":[],"sourceRoot":""}