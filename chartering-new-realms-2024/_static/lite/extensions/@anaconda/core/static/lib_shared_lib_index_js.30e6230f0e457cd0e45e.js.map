{"version":3,"file":"lib_shared_lib_index_js.30e6230f0e457cd0e45e.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAwD;AACT;AAC/C;AACA,qBAAqB,kEAAgB;AACrC,cAAc,yDAAM;AACpB,yBAAyB,yDAAM;AAC/B;AACA;AACA;AACA,iBAAiB,kEAAgB;AACjC;AACO,gDAAgD,cAAc;AACrE;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACO;AACP,UAAU,mDAAmD;AAC7D;AACA,qEAAqE,MAAM,WAAW,YAAY;AAClG;AACA;AACA;AACO;AACP,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB,WAAW,6BAA6B;AAClH;;;;;;;;;;;;;;;;;;;;ACzEqC;AACC;AACtC,iBAAiB,SAAS;AACmB;AAClB;;;;;;;;;;;;;;;ACJpB;AACP;;;;;;;;;;;;;;;;ACD6C;AACtC;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;;;;;;;;;;;;;;;;ACPO;AAC1C,sBAAsB,oDAAK;AAC3B,iEAAe,SAAS,EAAC","sources":["webpack://@anaconda/core/../../lib/shared/lib/backend.js","webpack://@anaconda/core/../../lib/shared/lib/index.js","webpack://@anaconda/core/../../lib/shared/lib/plugin.js","webpack://@anaconda/core/../../lib/shared/lib/plugins/core.js","webpack://@anaconda/core/../../lib/shared/lib/tokens/core.js"],"sourcesContent":["import { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nasync function makeRequest(endpoint, query, options) {\n    const settings = ServerConnection.makeSettings();\n    let url = URLExt.join(settings.baseUrl, endpoint);\n    const encodedQuery = URLExt.objectToQueryString(query);\n    if (encodedQuery) {\n        url += encodedQuery;\n    }\n    return await ServerConnection.makeRequest(url, options, settings);\n}\nexport async function backendFetch(endpoint, query = {}, options = {}, isJSON = true) {\n    try {\n        const response = await makeRequest(endpoint, query, options);\n        return handleResponse(response, isJSON);\n    }\n    catch (e) {\n        throw new BackendError('Network request failed', { underlying: e });\n    }\n}\nexport function handleProxyResponse(data) {\n    let { remote_status_code: code, remote_data: proxyData } = data;\n    if (code < 200 || code >= 300) {\n        throw new BackendError(`Proxied network request returned a ${code} status`, { code, data });\n    }\n    return proxyData;\n}\nexport class BackendError extends Error {\n    constructor(message, { code, data, underlying }) {\n        // The old version of typescript needed to support v3 extensions\n        // doesn't have ES2022, and therefore errors when calling super() with extra args\n        // @ts-ignore\n        super(message, { cause: underlying });\n        this.statusCode = code;\n        this.data = data;\n    }\n}\nexport class InvalidJSONError extends BackendError {\n}\nasync function handleResponse(response, isJSON) {\n    if (!response.ok) {\n        return handleError(response);\n    }\n    const text = await response.text();\n    if (!isJSON) {\n        return text;\n    }\n    let data;\n    if (text.length > 0) {\n        try {\n            data = JSON.parse(text);\n        }\n        catch (e) {\n            throw new InvalidJSONError('Received a response that isn\\'t JSON', {\n                data: { rawText: text },\n                underlying: e\n            });\n        }\n    }\n    return data;\n}\nasync function handleError(response) {\n    const text = await response.text();\n    let data;\n    if (text.length > 0) {\n        try {\n            data = JSON.parse(text);\n        }\n        catch (e) {\n            console.warn('Received an error message that isn\\'t JSON', text);\n        }\n    }\n    throw new BackendError(`Network request returned a ${response.status} status`, { code: response.status, data });\n}\n","import * as backend from \"./backend\";\nimport CoreToken from \"./tokens/core\";\nconst tokens = { CoreToken };\nexport { Environment } from \"./plugins/core\";\nexport { backend, tokens };\n","export class ComposablePlugin {\n}\n","import { ComposablePlugin } from \"../plugin\";\nexport var Environment;\n(function (Environment) {\n    Environment[\"development\"] = \"development\";\n    Environment[\"staging\"] = \"staging\";\n    Environment[\"production\"] = \"production\";\n    Environment[\"local\"] = \"local\";\n})(Environment || (Environment = {}));\n","import { Token } from '@lumino/coreutils';\nconst CoreToken = new Token('@anaconda/core');\nexport default CoreToken;\n"],"names":[],"sourceRoot":""}